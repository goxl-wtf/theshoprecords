# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

## Browser MCP (browser-tools)
You can use the `browser-tools-mcp` server commands to automate browser tasks, such as:
- `getConsoleLogs`  
- `getConsoleErrors`  
- `getNetworkErrors`  
- `getNetworkLogs`  
- `takeScreenshot`  
- `getSelectedElement`  
- `wipeLogs`  

### Example usage:
You might call the `takeScreenshot` tool to capture the current browser viewport if you need a visual reference of your website. Or use `getConsoleLogs` to debug any messages in the browser console.

## GitHub MCP (github-mcp)
Use this server to manage GitHub operations, such as:
- `create_or_update_file`
- `search_repositories`
- `create_repository`
- `get_file_contents`
- `push_files`
- `create_issue`
- `create_pull_request`
- `fork_repository`
- `create_branch`
- `list_commits`
- `list_issues`
- `update_issue`
- `add_issue_comment`
- `search_code`
- `search_issues`
- `search_users`
- `get_issue`

### Example usage:
- Run `create_or_update_file` to commit new or changed files to the repository.
- Use `create_pull_request` to open a new PR from a branch to `main`.
- Manage issues via `create_issue` or `add_issue_comment`.

## Supabase MCP (supabase)
Use this server to interact with the Supabase PostgreSQL database:
- `query` - Run SQL queries against the Supabase database
  
### Example usage:
- Use `query` to check the database schema or retrieve data directly from tables

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.  
  (**Note**: This may not be strictly necessary now that you rely on MCP, but we preserve it as previously stated.)
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- [New Lesson] For Next.js projects, keep your tasks and sub-tasks well-organized in the Scratchpad to track progress (e.g., `[X]`, `[ ]`).
- [New Lesson] The `browser-tools-mcp` and `github-mcp` can replace previous Python scripts for screenshots, debugging, or GitHub tasks.
- [New Lesson] When initializing a Next.js project in an existing directory, using temporary solution like creating in a sibling directory and copying files might be easier than forcing the installation.
- [New Lesson] When refactoring components in Next.js, start by identifying clear UI boundaries, creating properly typed interfaces, and extracting from the largest components first.
- [New Lesson] When creating hover effects, use Tailwind's group and group-hover classes to create coordinated animations and interactive elements.
- [New Lesson] For Supabase integration, create a robust utility function like getSupabase() that includes error handling for more reliable database access.
- [New Lesson] When refactoring a large page into components, organize them in logical feature folders (e.g., `/components/productPage/`) with proper index files to simplify imports.

# Scratchpad

# Current Task: Implementing Shopping Cart Functionality

## Goal
Create a fully functional shopping cart system that allows users to add products to the cart, modify quantities, remove items, and persist cart state.

## Implementation Plan

### 1. Cart State Management
[X] 1.1 Create CartContext using React Context API to manage cart state
[X] 1.2 Define CartItem interface and CartState interface
[X] 1.3 Create CartProvider component with state and functions
[X] 1.4 Implement localStorage persistence for cart data

### 2. Cart Operations
[X] 2.1 Implement addToCart function
[X] 2.2 Implement removeFromCart function
[X] 2.3 Implement updateQuantity function
[X] 2.4 Implement clearCart function
[X] 2.5 Implement cart calculation functions (subtotal, total, item count, etc.)

### 3. Cart Components
[X] 3.1 Create CartItem component to display individual items (CartItemRow)
[X] 3.2 Create AddToCart button component
[X] 3.3 Update Cart page to use CartContext
[X] 3.4 Create MiniCart dropdown component for header
[X] 3.5 Create quantity selector component

### 4. UI Enhancements
[X] 4.1 Add cart indicator/badge on header
[X] 4.2 Implement loading states for cart operations
[X] 4.3 Add animations for adding/removing items
[X] 4.4 Add toast notifications for cart actions

### 5. Integration & Testing
[X] 5.1 Connect AddToCart buttons in product pages with cart context
[ ] 5.2 Ensure UI updates correctly with cart changes
[ ] 5.3 Test cart persistence across page reloads/navigation
[ ] 5.4 Verify cart calculations
[ ] 5.5 Test edge cases (adding same product multiple times, etc.)

# Previous Task Information:
# Task Overview: Building TheShopRecords Next.js Frontend (Phase 1 & Partial Phase 2)

The goal is to create a modern Next.js frontend for a vinyl record marketplace called "TheShopRecords", following the development plan in the docs folder.

## Phase 1: Frontend Setup with Next.js

### Subtasks:
[X] 1. Project Initialization & Configuration
  [X] 1.1 Already in root folder "theshoprecords" (no need to create/clone repo)
  [X] 1.2 Run create-next-app to initialize project
  [X] 1.3 Install additional dependencies (Tailwind CSS, Supabase client)
  [X] 1.4 Confirm Next.js structure

[X] 2. Basic Project Setup
  [X] 2.1 Configure global styles
  [X] 2.2 Set up main layout (header, footer)
  [X] 2.3 Set up Supabase client connection

[X] 3. Create Pages & Routes
  [X] 3.1 Home Page
    [X] 3.1.1 Basic layout
    [X] 3.1.2 Fetch products from Supabase
  [X] 3.2 Shop/Catalog Page
  [X] 3.3 Product Detail Page (fetching from Supabase by ID)
  [X] 3.4 Cart Page
  [X] 3.5 Auth Pages (login, register)
  [X] 3.6 User Dashboard (placeholder)

[X] 4. Replicate & Improve Existing Design
  [X] 4.1 Header (Nav & Search)
  [X] 4.2 Footer
  [X] 4.3 Typography & Colors
  [X] 4.4 Responsive Layout

[X] 5. Implement Data Fetching & State Management
  [X] 5.1 Supabase Integration for Products
    [X] 5.1.1 Set up types that match database schema
    [X] 5.1.2 Create service functions for product fetching
    [X] 5.1.3 Use real data from Supabase instead of dummy data
  [X] 5.2 Cart State

[X] 6. Navigation & Routing Verification
  [X] 6.1 Set up navigation links
  [X] 6.2 Test routes and layouts
    [X] 6.2.1 Create layout files for all routes
    [X] 6.2.2 Ensure all pages use the MainLayout consistently

[X] 7. Styling & UI Polishing
  [X] 7.1 Product Cards
  [X] 7.2 Buttons & Forms
  [X] 7.3 Hover & Focus States
    [X] 7.3.1 Add hover effects to product images (zoom and overlay)
    [X] 7.3.2 Add hover effects to product titles (animated underline)
    [X] 7.3.3 Add hover effects to "Add to Cart" buttons (scale, shadow, icon appearance)
  [X] 7.4 Images

[X] 8. SEO & Meta Setup
  [X] 8.1 Head Metadata
  [X] 8.2 Basic SEO elements

[✓] 9. Version Control
  [X] 9.1 Git Commits
  [ ] 9.2 Pull Requests & Code Reviews (not applicable for single developer)
  [ ] 9.3 Continuous Deployment (optional)

[✓] 10. Testing & Final Checks (In Progress)
  [X] 10.1 Browser Testing - Initial Chrome testing complete
    [ ] 10.1.1 Test in Firefox 
    [ ] 10.1.2 Test in Safari
    [ ] 10.1.3 Test in Edge
  [X] 10.2 Mobile Responsiveness - Verified in Chrome dev tools
  [X] 10.3 Basic Accessibility - Added alt text, proper heading structure
  [ ] 10.4 Performance Check - Need to run Lighthouse audit

## Phase 2: Supabase Backend Integration (Partially Complete)

### Subtasks:
[X] 1. Supabase Project Setup
  [X] 1.1 Create Supabase project
  [X] 1.2 Set up environment variables
  [X] 1.3 Configure client connection

[X] 2. Database Schema Implementation
  [X] 2.1 Created products table
  [X] 2.2 Created images table
  [X] 2.3 Created tracks table
  [X] 2.4 Created genres and styles tables
  [X] 2.5 Created product_genres and product_styles junction tables

[X] 3. Seed Initial Data
  [X] 3.1 Populated database with 145+ product records
  [X] 3.2 Added associated images, tracks, genres and styles

[✓] 4. Frontend Integration
  [X] 4.1 Created TypeScript interfaces matching database schema
  [X] 4.2 Implemented service functions to fetch data from Supabase
  [X] 4.3 Updated components to use real data

[ ] 5. Remaining Supabase Setup
  [ ] 5.1 Authentication setup
  [ ] 5.2 User profiles and permissions
  [ ] 5.3 Row-level security policies
